#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'rubygems'
require 'ruby-bitly'
require 'optparse' 
require 'readme'
require 'ostruct'
require 'date'

class App
  VERSION = File.read(File.join(File.dirname(__FILE__), '..', 'VERSION'))
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose # [Optional]
            
      process_arguments            
      puts process_command.to_s
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
    
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      
      opts.on('-s', '--shorten')       { @options.shorten = true }
      opts.on('-e', '--expand')        { @options.expand = true }
      opts.on('-u', '--user-clicks')   { @options.user_clicks = true }
      opts.on('-g', '--global-clicks') { @options.global_clicks = true }
      
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }
      opts.on('-q', '--quiet')      { @options.quiet = true }

      opts.parse!(@arguments) rescue return false

      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      @arguments.length == 1 and (@options.shorten or @options.expand or @options.user_clicks or @options.global_clicks)
    end
    
    # Setup the arguments
    def process_arguments
    end
    
    def output_help
      Readme::usage() #exits app
    end
    
    def output_usage
      Readme::usage('usage') # gets usage from comments above
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      return Bitly.shorten(@arguments[0]).short_url if @options.shorten
      return Bitly.expand(@arguments[0]).long_url if @options.expand
      return Bitly.clicks(@arguments[0]).user_clicks.to_s if @options.user_clicks
      return Bitly.clicks(@arguments[0]).global_clicks.to_s if @options.global_clicks
    end
end

app = App.new(ARGV, STDIN)
app.run
