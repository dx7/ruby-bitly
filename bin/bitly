#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'rubygems'
require 'ruby-bitly'
require 'optparse' 
require 'readme'
require 'ostruct'
require 'date'

class App
  VERSION = File.read(File.join(File.dirname(__FILE__), '..', 'VERSION'))
  ACCOUNT_FILE_PATH = "#{ENV['HOME']}/.bitly"

  attr_accessor :arguments, :options, :message

  def initialize(arguments, stdin = nil)
    self.options = OpenStruct.new
    self.arguments = arguments
    @stdin = stdin
  end

  def run
    process_options
    
    if arguments_valid? 
      output_options if options.verbose
            
      process_arguments
      puts "#{options.message} #{process_command}".strip
    else
      output_help
    end
  end
  
  protected
  
    def load_account_data
      begin
        account_data = YAML.load(File.read(ACCOUNT_FILE_PATH))
      rescue
        
      end

      if account_data
        options.login = account_data["login"]
        options.key = account_data["key"]
      end
    end
    
    def default_options
      options.verbose = false
      options.quiet = false
    end
    
    def process_options
      default_options
      
      opts = OptionParser.new 
      
      opts.on('-s', '--shorten')       { options.shorten = true; options.message = 'Short url:' }
      opts.on('-e', '--expand')        { options.expand = true; options.message = 'Original url:' }
      opts.on('-u', '--user-clicks')   { options.user_clicks = true; options.message = 'User clicks:' }
      opts.on('-g', '--global-clicks') { options.global_clicks = true; options.message = 'Global clicks:' }
      
      opts.on('-l', '--login LOGIN')  { |login| options.login = login }
      opts.on('-k', '--key KEY')      { |key| options.key = key }
      
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { options.verbose = true }
      opts.on('-q', '--quiet')      { options.quiet = true; options.verbose = false;  options.message = '' }
      
      post_process_options
      
      opts.parse!(arguments) rescue return false
    end
    
    def post_process_options
      # Bitly API Login / Key
      load_account_data unless options.login and options.key
      
      # Default option: --shorten
      options.shorten = true unless options.expand or options.user_clicks or options.global_clicks
    end

    def output_options
      puts "Options:\n"
      
      options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
      
      puts "  URL: #{arguments.first}\n"
    end

    def arguments_valid?
      arguments.length == 1
    end
    
    def process_arguments
    end
    
    def output_help
      Readme::usage() #exits app
    end
    
    def output_version
      puts "bitly version #{VERSION.chomp} [gem ruby-bitly]"
    end
    
    def process_command
      return Bitly.shorten(arguments.first, options.login, options.key).url if options.shorten
      return Bitly.expand(arguments.first, options.login, options.key).long_url if options.expand
      return Bitly.get_clicks(arguments.first, options.login, options.key).user_clicks.to_s if options.user_clicks
      return Bitly.get_clicks(arguments.first, options.login, options.key).global_clicks.to_s if options.global_clicks
    end
end

app = App.new(ARGV)
app.run
